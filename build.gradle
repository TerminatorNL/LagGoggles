buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "com.wynprice.cursemaven:CurseMaven:1.1.0"
    }
}
String LagGogglesVersion = "1.12.2-5.4"

boolean installIntoServer = hasProperty("isServer")

String version_file = "./build/last_version.txt"
String last_file_name = "./build/last_file_name.txt"
String last_file_path = "./build/last_file_path.txt"

if(project.gradle.startParameter.taskNames.contains("build")) {
    delete version_file
    delete last_file_name
    delete last_file_path
}


apply plugin: 'net.minecraftforge.gradle.forge'
// EZ testing of compatibility! Nice!
apply plugin: "com.wynprice.cursemaven"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

idea{
    module{
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

ext.GetCommitCount = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--all', '--count'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = LagGogglesVersion + "-" + GetCommitCount()
group= "com.github.terminatornl.laggoggles" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LagGoggles"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"


    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}

minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"

    replaceIn "Main.java"
    replace '${version}', project.version
    mappings = "snapshot_20180808"
}

configurations {
    compileOnly.transitive = false
}

repositories {
    mavenLocal() // developers can run the publishToMavenLocal task on TickCentral to use it here
}

dependencies {
    compileOnly "com.github.terminatornl.tickcentral:TickCentral:2.0" // resolved in mavenLocal, run publishToMavenLocal on TickCentral
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

}

task finalize << {
    new File(projectDir, version_file).text = version
    new File(projectDir, last_file_name).text = jar.archiveName
    new File(projectDir, last_file_path).text = jar.archivePath

    if(installIntoServer) {
        delete fileTree('run_server_obf/mods') {
            include 'LagGoggles*'
        }
        println("Copying " + jar.archivePath + " into run_server_obf/mods")
        copy {
            from jar.archivePath
            into "run_server_obf/mods"
        }
    }
}

build.finalizedBy(finalize)